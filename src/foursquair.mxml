<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="100%" initialize="init();" backgroundColor="#FFFFFF" backgroundAttachment="assets/images/foursquare_header_background.png">
    <mx:states>
        <mx:State name="Login">
            <mx:SetProperty target="{main}" name="visible" value="false"/>
            <mx:SetProperty target="{login}" name="visible" value="true"/>
        </mx:State>
        <mx:State name="Splash">
            <mx:SetProperty target="{main}" name="visible" value="false"/>
            <mx:SetProperty target="{login}" name="visible" value="false"/>
            <mx:AddChild position="lastChild">
                <mx:Canvas id="splash" width="100%" height="100%">
                    <mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    	<mx:Image source="@Embed(source='assets/images/foursquare_splash.png')" horizontalCenter="0" verticalCenter="0"/>
                    	<mx:SWFLoader id="splashLoadingIndicator" source="@Embed(source='assets/swf/foursquare_loader.swf')" width="16" height="16" autoLoad="true" horizontalCenter="0" verticalCenter="0"/>
                    </mx:VBox>
                </mx:Canvas>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Style>
    	global{
    		fontFamily: Arial;
        }
        
        Button{
            cornerRadius:3;
            fillAlphas: 1.0, 1.0;
            fontSize: 11;
        }
        Button.selected{
        	fillColors: #B1CD45, #9CB92E;
        	borderColor:#698109;
        	color: #FFFFFF;
        }
    </mx:Style>
    <mx:Script>
        <![CDATA[
        	import air.update.events.UpdateEvent;
        	import mx.controls.Image;
        	import mx.events.CollectionEvent;
            import mx.controls.Alert;
            import com.foursquare.api.*;
            import com.foursquare.util.XMLUtil;
            
            import mx.collections.ArrayCollection;
            import mx.utils.ObjectUtil;
            import mx.effects.Blur;
            import mx.effects.Move;
            import mx.core.Application;
            import flash.utils.Timer;
            import flash.events.TimerEvent;
            import mx.events.CollectionEvent;
            import mx.events.CollectionEventKind;
            
            import flash.net.navigateToURL;
            
            import com.adobe.air.notification.VideoNotification;
            import com.adobe.air.notification.NotificationClickedEvent;
            import com.adobe.air.notification.Purr;
            import com.adobe.air.notification.AbstractNotification;
            import com.adobe.air.notification.Notification;
            import mx.utils.StringUtil;
            
            public var foursquare:FoursqaureService = new FoursqaureService('266d5934f6cb223fcd5ffc75eeb0a99404acf504c', '6265da6ce9bd8cb2c69632ae51836327');
            [Bindable] public var checkins:ArrayCollection;
            [Bindable] public var actor:UserVO;
            [Bindable] public var venues:ArrayCollection = new ArrayCollection();
            [Bindable] public var currentVersion:String;
            
            import flash.filesystem.*; 
            public var oauthFile:File; 
            
            private var updateCheckTimer:Timer;
            
            private var purr:Purr = new Purr(1);
            private const iconURL: String = "assets/images/notification_dude.png";
            private var bmp: Bitmap = null;
            
            import air.update.ApplicationUpdaterUI;
            var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
            
            private function getApp():foursquair{
            	return mx.core.Application.application as foursquair;
            }
            
            private function init():void{
            	getApp().currentState = 'Splash';
            	appUpdater.configurationFile = new File("app:/updateConfig.xml"); 
                appUpdater.initialize();
                appUpdater.checkNow();
                
                currentVersion = appUpdater.currentVersion;
                
            	var i:Image = new Image;
            	i.addEventListener(Event.COMPLETE, function(event:Event):void{
            		bmp = Bitmap(Image(event.target).content);
                    purr.setIcons([bmp.bitmapData], "foursquair: all the cool kids are doing it.");
                    
                    /*
                    var m: NativeMenu = new NativeMenu();
                    m.addItem(new NativeMenuItem('Exit'));
                    purr.setMenu(m);
                    */
                    
            	});
            	i.load(iconURL);
            	
            	
                
            	
                oauthFile = File.applicationStorageDirectory; 
                oauthFile = oauthFile.resolvePath("Preferences/oauth_debug.txt");
                if(oauthFile.exists) { 
                    var stream:FileStream = new FileStream(); 
	                stream.open(oauthFile, FileMode.READ); 
	                var filedata:String = stream.readUTFBytes(stream.bytesAvailable); 
	                stream.close();
	                
	                var d:Object = com.foursquare.util.XMLUtil.XMLToObject(filedata);
	                foursquare.oauth_token = d.foursquare.oauth_token;
                    foursquare.oauth_token_secret = d.foursquare.oauth_token_secret;
                    
	                bootstrap();
	                
                } else { 
                    firstRun();
                } 
            }
            
            private function firstRun():void { 
                // do stuff..
                getApp().currentState = 'Login';
                appUpdater.checkNow();
            } 
            
            public function showFlashMessage(msg:String):void{
                
            }
            
            public function checkForUpdates(...rest):void{
            	trace('Check updates');
            	showIndicator(friendsLoadingIndicator);
            	
                getApp().status = 'Checking for updates...';
                foursquare.getCheckins(
                    function(c:Array):void{
                        var lastKnown:CheckinVO = checkins.getItemAt(0) as CheckinVO;
                        if(lastKnown.id < c[0].id){
                            var toAdd:Array = new Array();
                            c.reverse().forEach(function(el:Object, index:int, arr:Array){
                            	if(el.id > lastKnown.id){
                            		toAdd.push(el);
                            	}
                            });
                            addCheckins(toAdd);
                            getApp().status = toAdd.length+' updates added!';
                        }
                        else{
                        	getApp().status = 'No new updates :(';
                        }
                        hideIndicator(friendsLoadingIndicator);
                    }
                );
            }
            
            public function transition(from:Canvas,to:Canvas,direction:String):void{
                var out:Move = new Move();
                var incoming:Move = new Move();
                if(direction=='right'){
                    out.duration = 500;
                    out.target = from;
                    out.xTo = -900;
                    to.visible = false;
                    incoming.target = to;
                    incoming.xTo = 900;
                    incoming.play();
                    incoming.end();
                    to.visible = true;
                    incoming.xTo = 0;
                    out.play();
                    incoming.play();
                }
                else {
                    out.duration = 500;
                    out.target = from;
                    out.xTo = 900;
                    to.visible = false;
                    incoming.target = to;
                    incoming.xTo = -900;
                    incoming.play();
                    incoming.end();
                    to.visible = true;
                    incoming.xTo = 0;
                    out.play();
                    incoming.play();
                }
                
                var out_blur:Blur = new Blur();
                out_blur.target = from;
                out_blur.duration = 500;
                out_blur.play();
                
                var incoming_blur:Blur = new Blur();
                incoming_blur.target = to;
                incoming_blur.duration = 500;
                incoming_blur.blurXTo = 0.0;
                incoming_blur.blurXFrom = 200.0;
                incoming_blur.play();
            }
            
            /**
             * @todo (lucas) Be smarter about when to display notifications/make them more useful.
             */ 
            private function addCheckins(c:Array, notify:Boolean=true):void{
            	if(c.length > 0){
	            	checkins.addAllAt(new ArrayCollection(c), 0);
	            	if(notify==true){
		                var n:Notification = new Notification('Foursquair', c.length+' new checkins', AbstractNotification.TOP_RIGHT, 5, bmp);
		                n.addEventListener(NotificationClickedEvent.NOTIFICATION_CLICKED_EVENT, function(e:NotificationClickedEvent):void{
		                	AbstractNotification(e.target).close();
		                	getApp().nativeWindow.activate();
		                });
		                purr.addNotification(n);
	                }
                }
            }
            
            private function showIndicator(indicator:SWFLoader):void{
            	indicator.visible = true;
            	indicator.includeInLayout = true;
            }
            
            private function hideIndicator(indicator:SWFLoader):void{
            	indicator.visible = false;
                indicator.includeInLayout = false;
            }
            public function bootstrap():void{
            	try{
            	    showIndicator(friendsLoadingIndicator);
                }
                catch(e:Error){}
             
            	updateCheckTimer = new Timer((60000*5));
            	updateCheckTimer.addEventListener(TimerEvent.TIMER, checkForUpdates);
            	updateCheckTimer.start();
            	
            	checkins = new ArrayCollection();
            	
            	getApp().status = 'Loading up.... Please wait';
            	foursquare.getUserDetails(
            	    0, 
            	    function(u:UserVO):void{
	                    actor = u;
	                    foursquare.actor = u;
	                    /*
	                    foursquare.getHistory(
	                        20,
	                        function(c:Array):void{
	                            checkins = new ArrayCollection(c);
	                            getApp().currentState = '';
	                        }
	                    );
	                    */
	                    foursquare.getCheckins(function(c:Array):void{
                    	    addCheckins(c);
                            getApp().currentState = '';
                            getApp().status = '';
                            hideIndicator(friendsLoadingIndicator);
                
	                    });
	                    foursquare.getVenues(actor.city.geolat, actor.city.geolong, 25, 25, '', function(v:Array):void{
	                       venues = new ArrayCollection(v);
	                    });
	                }, 
	                null, 
	                true, 
	                false
                );
            }
            
            public function handleLogin():void{
            	showIndicator(loginLoadingIndicator);
            	
            	getApp().status = 'Loggin in...';
            	foursquare.authExchange(
            	   username.text, 
            	   password.text, 
            	   function():void{
            	       if(rememberMe.selected){
            	       	   var d:Object = new Object();
            	       	   d.oauth_token = foursquare.oauth_token;
            	       	   d.oauth_token_secret = foursquare.oauth_token_secret;
            	       	   var contents:String = com.foursquare.util.XMLUtil.objectToXML(d).toXMLString();
            	       	   
	            	       //var c:XML = new XML('<foursquare><oauth_token>'+foursquare.oauth_token+'</oauth_token><oauth_token_secret>'+foursquare.oauth_token_secret+'</oauth_token_secret></foursquare>');
	            	       //var contents:String = c.toXMLString();
	            	       
	            	       var stream:FileStream = new FileStream(); 
			               stream.open(oauthFile, FileMode.WRITE);
			               stream.writeUTFBytes(contents); 
			               stream.close(); 
            	       }
            	       getApp().status = '';
            	       hideIndicator(loginLoadingIndicator);
            	       bootstrap();
            	   }, 
            	   function():void{
            	   	   getApp().status = 'Error trying to do auth exchange';
            	   	   hideIndicator(loginLoadingIndicator);
            	   }
            	);
            }
            /**
             * @todo (lucas) Link a shout to a venue without actually counting as a checkin? 
             * ie 
             * "Anybody want to check out this bar tonight?"
             * 
             * <a>Details on LIC Bar</a>
             */ 
            public function handleShout():void{
            	showIndicator(shoutLoadingIndicator);
            	getApp().status = 'Shouting...';
            	shoutSubmit.enabled = false;
            	foursquare.checkin(0,'',shoutText.text,function(c:CheckinVO):void{
            		shoutSubmit.enabled = true;
            		addCheckins([c], false);
            		getApp().status = '';
            		shoutText.text = '';
            		hideIndicator(shoutLoadingIndicator);
            	});
            }
            
            public function handleVenueSearch():void{
            	showIndicator(searchLoadingIndicator);
            	venues.removeAll();
                getApp().status = 'Searching...';
                venueSearchSubmit.enabled = false;
                try{
                    foursquare.getVenues(
                        actor.city.geolat, 
                        actor.city.geolong, 
                        10, 
                        50, 
                        venueSearchText.text, 
                        function(v:Array):void{
                            venuesTitle.text = 'Search results for '+venueSearchText.text;
                            venues.addAll(new ArrayCollection(v));
                            venueSearchSubmit.enabled = true;
                            getApp().status = '';
                            hideIndicator(searchLoadingIndicator);
                        }
                    );
                }
                catch(e:Error){
                    mx.controls.Alert.show(e.message, 'Error getting venues');
                    getApp().status = '';
                    venueSearchSubmit.enabled = true;
                    hideIndicator(searchLoadingIndicator);
                }
                
            }
        ]]>
    </mx:Script>
    <mx:VBox id="login" visible="false" horizontalCenter="0" verticalCenter="0">
        <mx:Image source="@Embed(source='assets/images/foursquare_logo_270.png')"/>
        <mx:Form defaultButton="{loginSubmit}" id="form1" width="100%">
        <mx:Label text="Username or phone #" />
        <mx:TextInput id="username" />
        
        <mx:Label text="Password" />
        <mx:TextInput id="password"  displayAsPassword="true"/>
        <mx:CheckBox id="rememberMe" selected="true" label="Remember me"/>
        <mx:HBox width="100%">
        	<mx:Button label="Sign in" id="loginSubmit" click="handleLogin();"/>
        	<mx:SWFLoader visible="false" includeInLayout="false" id="loginLoadingIndicator" source="@Embed(source='assets/swf/foursquare_loader.swf')" width="16" height="16" autoLoad="true"/>
        </mx:HBox>
        </mx:Form>
    </mx:VBox>
    <mx:Canvas id="main" width="100%" height="100%">
    <mx:VBox width="100%" height="100%">
        <mx:HBox width="100%" horizontalAlign="left" height="60" backgroundImage="@Embed(source='assets/images/foursquare_header_background.png')" backgroundSize="100%">
            	<mx:HBox verticalAlign="bottom">
            	   <mx:Image source="@Embed(source='assets/images/foursquare_header.png')" width="214" height="58" buttonMode="true" useHandCursor="true" click="navigateToURL(new URLRequest('http://foursquare.com'));" />
            	   <mx:HBox paddingBottom="10" horizontalGap="1">
            	   	   <mx:Button label="Friends" click="viewstack1.selectedIndex=0;" styleName="selected"/>
                       <mx:Button label="Badges" click="viewstack1.selectedIndex=1;"/>
                       <mx:Button label="Places" click="viewstack1.selectedIndex=2;"/>
            	   </mx:HBox>
            	</mx:HBox>
        </mx:HBox>
        <mx:ViewStack id="viewstack1" width="100%" height="100%" creationPolicy="all">
            <mx:Canvas label="F" width="100%" height="100%">
                <mx:VBox width="100%" height="100%">
                    <mx:HBox width="100%">
                    	<mx:Label text="Friends"  fontSize="11"/>
                    	<mx:SWFLoader id="friendsLoadingIndicator" source="@Embed(source='assets/swf/foursquare_loader.swf')" width="16" height="16" autoLoad="true"/>
                    </mx:HBox>
                    <mx:List dataProvider="{checkins}" width="100%" height="100%" themeColor="#FFFFFF" borderStyle="none"><mx:itemRenderer>
                        <mx:Component>
                            <mx:HBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
                                <mx:Image source="{data.user.photo}" height="75" width="75" />
                                <mx:VBox verticalGap="0" width="100%" borderStyle="solid" cornerRadius="3" horizontalScrollPolicy="off" verticalScrollPolicy="off" backgroundColor="#FFFFFF" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5">
                                    <mx:HBox width="100%">
                                    	<mx:Text text="{data.user.name_with_initial}" width="100%" fontSize="11" fontWeight="bold" />
                                    	<mx:Text text="{data.created_in_words}" fontSize="9" />
                                    </mx:HBox>
                                    <mx:Text text="@ {data.venue.name}" width="100%" fontWeight="bold" fontSize="10" />
                                    <mx:Text text="&quot;{data.shout}&quot;" includeInLayout="{data.shout!=''}" visible="{data.shout!=''}" width="100%" fontSize="10" />
                                </mx:VBox>
                            </mx:HBox>
                        </mx:Component>
                    </mx:itemRenderer></mx:List>
                </mx:VBox>
            </mx:Canvas>
            <mx:Canvas label="B" width="100%" height="100%">
                <mx:VBox width="100%" height="100%">
                    <mx:Label text="Your badges" />
                    <mx:List dataProvider="{actor.badges}" width="100%" height="100%" borderStyle="none" themeColor="#FFFFFF"><mx:itemRenderer>
                        <mx:Component>
                            <mx:HBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
                                <mx:Image source="{data.icon}" height="57" width="57" />
                                <mx:VBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
                                    <mx:Text text="{data.name}" width="100%" />
                                    <mx:Text text="{data.description}" width="100%"></mx:Text>
                                </mx:VBox>
                            </mx:HBox>
                        </mx:Component>
                    </mx:itemRenderer></mx:List>
                </mx:VBox>
            </mx:Canvas>
            <mx:Canvas label="V" width="100%" height="100%">
                <mx:VBox width="100%" height="100%" verticalGap="1">
                    <mx:HBox width="100%">
                    	<mx:Label id="venuesTitle" text="Popular nearby" width="100%" />
                    	<mx:Form paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="10" defaultButton="{venueSearchSubmit}">
                    	    <mx:HBox width="100%">
                    		    <mx:SWFLoader visible="false" includeInLayout="false" id="searchLoadingIndicator" source="@Embed(source='assets/swf/foursquare_loader.swf')" width="16" height="16" autoLoad="true"/>
                    		    <mx:TextInput id="venueSearchText" />
                                <mx:Button label="Search" id="venueSearchSubmit" click="handleVenueSearch();" styleName="selected"/>
                            </mx:HBox>
                    	</mx:Form>
                    </mx:HBox>
                    <mx:HRule width="100%" />
                    <!--
                    @todo (lucas) It's really important to show "verified" places here right? ie places friends have been but you havent
                    -->
                    <mx:List dataProvider="{venues}" width="100%" height="100%" borderStyle="none" themeColor="#FFFFFF"><mx:itemRenderer>
                        <mx:Component>
                            <mx:VBox width="100%" verticalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
                                <mx:Script>
                                	<![CDATA[
                                		import mx.core.Application;
                                		import mx.controls.TextInput;
                                	]]>
                                </mx:Script>
                                <mx:HBox width="100%" horizontalGap="1">
                            	    <mx:Text text="{data.name}" fontWeight="bold" fontSize="11"></mx:Text> 
                            	    <mx:Text text="{data.address}" />
                            	    <mx:Text text="{data.crossstreet}" visible="{data.crossstreet!=null}" includeInLayout="{data.crossstreet!=null}" />
                            	    <mx:HBox horizontalAlign="right" width="100%" horizontalGap="2">
                            	        <mx:LinkButton label="details" click="navigateToURL(new URLRequest('http://foursquare.com/venue/'+data.id));" />
                                        <mx:LinkButton label="shout it" click="var shoutText:TextInput = mx.core.Application.application.shoutText; shoutText.text='Anybody want to go to '+data.name+'?';" />
                                    </mx:HBox>
                                </mx:HBox>
                                <mx:HRule width="100%" />
                            </mx:VBox>
                        </mx:Component>
                    </mx:itemRenderer></mx:List>
                </mx:VBox>
            </mx:Canvas>
        </mx:ViewStack>
        <mx:Form width="100%" defaultButton="{shoutSubmit}">
            <mx:HBox width="100%">
            <mx:Label text="Shout" />
            <mx:TextInput id="shoutText"  width="100%"/>
            <mx:SWFLoader visible="false" includeInLayout="false" id="shoutLoadingIndicator" source="@Embed(source='assets/swf/foursquare_loader.swf')" width="16" height="16" autoLoad="true"/>
            <mx:Button label="Holler" id="shoutSubmit" click="handleShout();"  cornerRadius="3" fillAlphas="[1.0, 1.0]" fillColors="[#B1CD45, #9CB92E]" color="#FFFFFF" borderColor="#698109" fontSize="12"/>
            </mx:HBox>
        </mx:Form>
    </mx:VBox>
    <mx:Label text="v {currentVersion}" right="0"/>
    </mx:Canvas>
    
</mx:WindowedApplication>